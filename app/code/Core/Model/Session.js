/**
 * Equivalent to PHP's session functionality.
 */ 

const fs = require('fs');
const { dirname } = require('path');

class Session
{
	/**
	 * @param {HttpRequest} request - the http/https request object
	 * @description - Since DesktopAI will be for home usage
	 *                A session key gets generated by the 
	 * 				  "Client" IP Address. This also means 
	 * 				  the "Client" can access from any browser
	 *                on the device.
	 * @descriptionExtra - The session file is JSON stringified.
	 */
	constructor( request )
	{
		this.baseDir = dirname(require.main.filename);
		this.sessionDir = this.baseDir + '/var/session';
		this.data = {};

		try{
			fs.mkdirSync(this.baseDir + '/var');
		}catch(e)
		{
			//already exists
		}
		try{
			fs.mkdirSync(this.sessionDir);
		}catch(r)
		{

		}

		this.sessionId = 'session_' + request.socket.remoteAddress.split('.').join('_').split('::1').join('self_');
		this._load(this.sessionId);
	}
	/**
	 * @description - Loads the session file 
	 */
	_load()
	{
		try{
			let data = fs.readFileSync(this.sessionDir + '/' + this.sessionId + '.session' , 'utf-8');

			this.data = JSON.parse(data);
		}catch(e)
		{
			this.data = {};

			fs.writeFileSync(this.sessionDir + '/' + this.sessionId + '.session' , '{}');
		}
	}

	/**
	 * @param {String} key - the object key in session
	 * @return {Boolean} - if the property exists in the object, true is returned, else false.
	 */
	has(key)
	{
		return (typeof this.data[key] !== "undefined");
	}

	/**
	 * @param {String} key - the object key in session
	 * @return {String|Integer|Boolean|Float|Object} - returns the value assigned to the property.
	 */
	get(key)
	{
		return this.data[key];
	}

	/**
	 * @param {String} key - the key of the object to assign
	 * @param {String|Integer|Boolean|Float|Object} - Object to store in the session
	 * @description - Once the key has been set, this is saved automatically.
	 */
	set(key , value)
	{
		this.data[key] = value;
		this._save();
	}

	/**
	 * @param {String} key - the key of the object to remove.
	 */
	remove(key)
	{
		delete this.data[key];

		this._save();
	}

	/**
	 * @description - Saves the session data.
	 */
	_save()
	{
		try{
			fs.writeFileSync(this.sessionDir + '/' + this.sessionId + '.session' , JSON.stringify(this.data));
		}catch(e)
		{

		}
	}

	/**
	 * @description - Destroys the session.
	 */
	destroy()
	{
		try{
			fs.unlinkFileSync(this.sessionDir + '/' + this.sessionId + '.session');
		}catch(e)
		{

		}
	}
}

module.exports = Session;